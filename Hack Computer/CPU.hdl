// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    // Instruction decoding
    // identify type of instruction, 0 = A, 1 = C instruction
    // if A-instruction, it is loaded immediately into A Register
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    // A register and input mux
    // AND for condition to allow ALUtoa:
    //      if C instruction and store at register A is true (5th bit or destination bit)
    And(a=Cinstruction, b=instruction[5], out=ALUtoa); 
    Mux16(a=instruction, b=ALUout, sel=ALUtoa, out=regA);
    // load A if is A instruction or C instruction with destination to register A from ALU
    Or(a=Ainstruction, b=ALUtoa, out=loadA);
    ARegister(in=regA, load=loadA, out=RegAout);
    
    // D register 
    // only loaded if MSB is 1 (C-instruction) and d2(destination) or 4th bit is 1
    // takes the result of computation from ALU when true
    And(a=Cinstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=RegDout);


    // ALU and input mux
    // select A register or M(emory) based on a-bit(12th bit from instruction) to be loaded into ALU
    // inputs are swapped for implementation as a-bit = 1 loads inM and a-bit = 0 loads RegAout
    Mux16(a=RegAout, b=inM, sel=instruction[12], out=AMout);   

    // takes in D as x and A or M(emory) as y
    ALU(x=RegDout, y=AMout,
    zx=instruction[11],
    nx=instruction[10],
    zy=instruction[9], 
    ny=instruction[8], 
    f=instruction[7], 
    no=instruction[6], out=ALUout, zr=  zrout, ng=ngout);
    
    // sets value for output for writing to memory
    Or16(a=false, b=ALUout, out=outM);
    // addressing memory
    Or16(a=false, b=RegAout, out[0..14]=addressM);
    // write to memory if destination is M and C-instuction
    And(a=Cinstruction, b=instruction[3], out=writeM);

    // PC with JMP test
    // JEQ, zr = 1, j2(bit 1) = 1
    // if instruction is zero and output from ALU is zero then jump
    And(a=zrout, b=instruction[1], out=jeq);

    // JLT, ng = 1, j1(bit 2) = 1
    // if instruction is negative and output from ALU is negative then jump
    And(a=ngout, b=instruction[2], out=jlt);

    // ng = 0, zr = 0
    // check if output is positive
    Or(a=zrout, b=ngout, out=zeroOrneg);
    Not(in=zeroOrneg, out=positive);

    // JGT, j3(bit 0) = 1
    // if instruction is positive and output is positive then jump
    And(a=positive, b=instruction[0], out=jgt);

    // if condition is satisfied then jump
    // JLE, equal + less than
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jump);

    // If condition is met, then load PC and jump
    // If is C instruction then jump
    And(a=Cinstruction, b=jump, out=loadPC);

    // If there is no load, then increment PC and take in next instruction
    Not(in=loadPC, out=incPC);
    PC(in=RegAout, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
   
}
